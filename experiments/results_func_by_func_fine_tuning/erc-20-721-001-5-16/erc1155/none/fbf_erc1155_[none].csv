run,time_taken,iterations,verified,annotated_contract,function_status,status,threads
1,411.557692527771,26,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operator == address(0) || _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_cHO5BwLGKb1surth59fKJffz', 'thread_XikTNk86lTCyi7xo8NNYB9fZ', 'thread_54eXCVby5FpWBniMnxXPAZEX', 'thread_z1DdxuBVD0JAut8gTktKfd5p', 'thread_VBnR8PHnVDWqf80uU4ErKOXc', 'thread_Gx6bjMtLiOhVKnZsfdv5yjWk']"
2,219.45450687408447,16,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operator == __verifier_old_address(_operator) && _approved == __verifier_old_bool(_approved) || _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0) || (__verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from] && __verifier_old_uint(_balances[_id][_to]) == _balances[_id][_to]) /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from] && _to != address(0) && __verifier_old_uint(_balances[_id][_to]) + _value == _balances[_id][_to]); /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) >= _value || _from == _to function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i]  // balance of tokens transferred to `_to`
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || _balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]) - _values[j] // balance of tokens deducted from `_from`
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_ryIn6x3QMeBZlhcuwjr6ByOo', 'thread_k0LpmpiwQsZejl9HEROi2Po6', 'thread_ihGVetgOhE4Wy1l7jrEPHYmC', 'thread_HGK3dN7QQP1RU1OSIcmU91ZT', 'thread_NFxg8t6IV1XVE8DpaCmN4ynA', 'thread_hZubASI6l69ZRvl055XO9dDV']"
3,317.58896350860596,23,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) != _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition forall (address addr) (_to == addr || _from != addr) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + (_value * (_from == _to ? 0 : 1))
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_n6RBKCAS1CmF9AYxT5RETvIc', 'thread_yYQiZrMUMxmnfvIjpctMAKtr', 'thread_rH80EnP7tChbTdMsQYS7erxS', 'thread_reLwIi15nUPSgEhes2mLiffV', 'thread_Z8O47AfcXgnttytztDYKhzzU', 'thread_L3XDH0tvCAKE8Nw9ImUsmMX7']"
4,238.99081158638,16,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition __verifier_old_uint(_balances[_id][_to]) + _value == _balances[_id][_to] || _to == _from
    /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from] || _value <= __verifier_old_uint(_balances[_id][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || ( _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i] && _balances[_ids[i]][_from] >= 0 )
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_tvOAt9aeExlrhxQBrUrlG9xb', 'thread_MMOjLtxxNJluMVeVzstGG9o9', 'thread_93jFdOvygMuPtBL24l2f2VjG', 'thread_paZymoM7vjP184gcREyjHq3p', 'thread_jwbShM7ytJWexBCxwVqjPNjG', 'thread_2tXNWdnCjVWE0iRx7s8BH6pm']"
5,256.6973669528961,16,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || (_operatorApprovals[msg.sender][_operator] == _approved)
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + (_from == _to ? 0 : _value)
    /// @notice postcondition forall (address addr) (addr != _from || addr != _to) || _balances[_id][addr] == __verifier_old_uint(_balances[_id][addr])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_0C2IJNdaH9ZLjSXAO8ftzwOY', 'thread_lla2werTfriP0fv9tfF4JpCJ', 'thread_X0nSFLqsSD4AHoGNZFWNU0Qh', 'thread_yJ1PCf7isAZtIjxmjQ3zA3bk', 'thread_ASldzJVhdfaeCXbHbKQ48uYT', 'thread_8mbsaazEXAwNKS4PAkoRXisM']"
6,286.84952783584595,18,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition _owner == _owner
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operator == _operator || _approved != __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition ( !( _from == _to && _id == _id ) ) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + (_from != _to ? _value : 0)
    /// @notice postcondition ( !( _from == _to && _id == _id ) ) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - (_from != _to ? _value : 0)
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_POc3Ftx9uS38SkOCrAmVmFcV', 'thread_9AJlcNjWgQ88fPOICMJBEigx', 'thread_OYrrfZzkhOyZSuHmJUnW2m9w', 'thread_hxsvjnFwPv4fxW4v4TKxkcow', 'thread_0pIlIZJgeTLF7KZJaW15fFis', 'thread_fS20h3tVtDlxdSgkpBWpjyoW']"
7,136.87635803222656,7,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operator == __verifier_old_address(_operator) || (_approved == true && _operatorApprovals[msg.sender][_operator] == true) || (_approved == false && _operatorApprovals[msg.sender][_operator] == __verifier_old_bool(_operatorApprovals[msg.sender][_operator]))
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0) || (__verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from] && __verifier_old_uint(_balances[_id][_to]) == _balances[_id][_to])
    /// @notice postcondition _to != address(0) || (__verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from] && _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value && _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value)
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_2oxgejgn4ptK64WNBLE6odYb', 'thread_6zXTdicxm8tb5KQGYHkiPxHQ', 'thread_BqUbBa1InsOjieT4pUcubi54', 'thread_gDCDXQpyqEw7xVExQZJ5YEIQ', 'thread_Vmr5MwhXyUQ8zWSjp43Ft30N', 'thread_HcD6O1hwgAb9hjr6NlVTsebs']"
8,136.86659359931946,7,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) != _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition !(msg.sender != _from && _value > __verifier_old_uint(_balances[_id][_from])) || _value <= _balances[_id][_from] // ensuring that _from could not have a value less than _value if the sender is not _from
    /// @notice postcondition _to != address(0) // ensuring that the target address is not zero
    /// @notice postcondition _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - (_from == _to ? 0 : _value) // ensuring that the balance of _from decreases by _value if _to is different
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + (_from == _to ? 0 : _value) // ensuring that the balance of _to increases by _value if _to is different
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i] && _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_0m00aFpSJtgyZXwKySOUSj2a', 'thread_aHLez3wfzm08IhgSwisnb247', 'thread_64MwOE0jJLRY3JzcxjUVGypc', 'thread_pwPTlWJomVFybtO6W4NThG9X', 'thread_4YQ4pQAINIOZC5YkD1OpMIGP', 'thread_wCkKCZxEUZro24PWQb26UgJX']"
9,140.04047226905823,8,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0) || __verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from]
    /// @notice postcondition _to != address(0) || __verifier_old_uint(_balances[_id][_from]) >= _value || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition (_to == address(0) || __verifier_old_uint(_balances[_id][_from]) >= _value) || (_to != address(0) && ( _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value && _from != _to))
    /// @notice postcondition (_to == address(0) || __verifier_old_uint(_balances[_id][_from]) >= _value) || (_to != address(0) && _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) && ( _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value && _from != _to))
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _to != address(0) || __verifier_old_uint(_balances[_ids[i]][_from]) >= _values[i] || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i] - __verifier_old_uint(_balances[_ids[i]][_to])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_nvK5dfc0lg2oOkOf3zVlXUBe', 'thread_pZUFcvTKXt5IaOKWngU5OWLt', 'thread_K9UjrgrJt6eESb088g96gPEo', 'thread_zKc3QjpPYSoS6S8onm6dISiZ', 'thread_UXtjRHtZadIUnsChrdZcNTbr', 'thread_iPIYVO26NRvca4tHJImXJvdY']"
10,428.133451461792,26,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || (__verifier_old_bool(_operatorApprovals[msg.sender][_operator]) != _approved && _operatorApprovals[msg.sender][_operator] != __verifier_old_bool(_operatorApprovals[msg.sender][_operator]))
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][__verifier_old_address(_operator)]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_e4U6eIEonUy5jsUcD7PgE8y3', 'thread_IaAM4kdy0z04MhWrt81GJoTD', 'thread_XCgEKmiPRozpmZtKInyF5tDe', 'thread_Q4fhKGvPItZlYvhx0HdUWzUz', 'thread_8m1c26hWUqKfJQjW2vsnxBZ0', 'thread_GO2kvufOWGx59dZ5FdJz9ZEf']"
