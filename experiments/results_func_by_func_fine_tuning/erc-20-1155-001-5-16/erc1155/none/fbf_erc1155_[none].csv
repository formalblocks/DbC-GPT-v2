run,time_taken,iterations,verified,annotated_contract,function_status,status,threads
1,309.09559750556946,9,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _ids.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != _from || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _operatorApprovals[_from][msg.sender] || _from == msg.sender
    /// @notice postcondition __verifier_old_uint(_balances[_id][_to]) == _balances[_id][_to] || _from != _to
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _from == _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x])
    /// @notice postcondition _to != _from
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_pKhgeTMaherxF83pytnjLQJD', 'thread_arHdQnJXWDdDH7056xtFeA27', 'thread_p78MXTeEldpsW642iGkxNjd7', 'thread_q2kjcl1htvYxWipIbHEq0RLH', 'thread_3UiutkE0WZa2x8nTHedSC6aH', 'thread_glg5r0scWy1MX8URDvBD9fAo']"
2,218.3191020488739,7,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (__verifier_old_uint(_balances[_ids[x]][_from]) >= _values[x])
    /// @notice postcondition forall (uint h) _from != _to || _balances[_ids[h]][_from] == __verifier_old_uint(_balances[_ids[h]][_from])
    /// @notice postcondition forall (uint a) !(0 <= a && a < _ids.length) || (_from == _to) || ( _balances[_ids[a]][_from] == __verifier_old_uint(_balances[_ids[a]][_from]) - _values[a])
    /// @notice postcondition forall (uint d) !(0 <= d && d < _ids.length) || (_from == _to) || ( _balances[_ids[d]][_to] == __verifier_old_uint(_balances[_ids[d]][_to]) + _values[d])
    /// @notice postcondition address(0) != _to
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_n1RdCoUzhpY5NWYIaNmSFTEI', 'thread_zlKDpqrSJLYsuIOFrO2QZlwO', 'thread_7Tgo5usdGmCgIdny0R6lmB6E', 'thread_dR2a0y9Un0qOXzse6lZMZnYk', 'thread_kDOOyFAOSRKNfBAAZJA4It7T', 'thread_K1jBLr9An3Kou7MLH1Cl0ssI']"
3,424.083402633667,15,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_balances[_ids[k]][_to] == __verifier_old_uint(_balances[_ids[k]][_to]) + _values[k])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_from == _to) || (_balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_1Ow9FEfyvzq8nuUO2BQIZcuD', 'thread_3lwhjNakipzzPkqik8XGjglL', 'thread_6nDABU5yPQLIKBayb13JbPqQ', 'thread_DVV5kkCOFVu4NWm5UWNLOIVY', 'thread_WHfs9w6P6FGXYbVcdgRlLX24', 'thread_bqZKVZg9y6ku46WnwZIX5Nvm']"
4,722.3231341838837,21,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner] || (_owner == address(0) && balance == 0)
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition address(0) != _to
    /// @notice postcondition _operatorApprovals[_from][msg.sender] || _from == _to || __verifier_old_uint(_balances[_id][_from]) >= _value
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _from == _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x])
    /// @notice postcondition _to != _from
    /// @notice postcondition _values.length == _ids.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_zvhduauLGy86Kjr85qR4UKoj', 'thread_zS8rPGtd7KcqhnxE6Z89IrXC', 'thread_TQWP1UwBd5BjebYiPcGrsd1S', 'thread_TG88II1BFgettsb7iXckzECh', 'thread_ZdKDRSoWJkjqIuL66OLRG3Yi', 'thread_92pdWHrDi1UNRl6S9m6kmOwD']"
5,311.30580854415894,9,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == __verifier_old_bool(_operatorApprovals[_owner][_operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || _balances[x][_to] == __verifier_old_uint(_balances[x][_to])
    /// @notice postcondition _to == _from || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint x) (_from == _to) || (_balances[_ids[x]][_to] == __verifier_old_uint(_balances[_ids[x]][_to]) + _values[x])  || !(0 <= x && x < _ids.length)
    /// @notice postcondition forall (uint x) _from == _to || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x]) || !(0 <= x && x < _ids.length)
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (__verifier_old_uint(_balances[_ids[x]][_from]) >= _values[x])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_J6ZEOIcC1yDc9nPYLhC0ehHk', 'thread_F2NfyMB4F6c66mZT7RMObiqC', 'thread_4P4EixPb5i5QrYKTOBMzLGG2', 'thread_EmGUi8hbCk1o0dQ9g52ZvWJ7', 'thread_xNnsh0GOT9pj6eeD5h7hIaUp', 'thread_jk3XxYTSd1xWrdOJNRWOPYW8']"
6,502.85142278671265,17,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == __verifier_old_bool(_operatorApprovals[_owner][_operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x])
    /// @notice postcondition _to != _from
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_xVodchsfnExrmYNpVxhOYVRo', 'thread_KUCfwuT579IgdICoOSRQQ5C1', 'thread_7oISEwO0nEKZZafjSA2ibYTb', 'thread_RfeaJwtdHTcLipmwsh1dvQaA', 'thread_4gq0BOPe3kmZQ2IJGpffwJk6', 'thread_vVX7jL5h6vkW1K87NFvgL3oM']"
7,253.80124759674072,8,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _ids.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (_from == _to) || (__verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from])
    /// @notice postcondition forall (uint y) !(0 <= y && y < _id) || (_from != _to) || ( _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]))
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_balances[_ids[k]][_to] == __verifier_old_uint(_balances[_ids[k]][_to]) + _values[k])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_from == _to) || (_balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_J1cN5z5G1o7HFTNKjHDW6suH', 'thread_Twjh33ccQpWvwA6ymYdJHMj9', 'thread_kaDgUvmtf3D3qqiJLiZCCnWL', 'thread_dCmoPD6XiJUVx5YhqkXrL1d4', 'thread_3vFDobww9n7kx78GzQD7P8IZ', 'thread_qRjziexrQCRb2ypjJ26MdpNk']"
8,459.42864966392517,12,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _operatorApprovals[_from][msg.sender] || _from == msg.sender
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _from == _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    /// @notice postcondition __verifier_old_uint(_balances[_id][_to]) == _balances[_id][_to] || _from != _to
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from == _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]) - _values[j])
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (__verifier_old_uint(_balances[_ids[x]][_from]) >= _values[x])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_PuA3piJz8HRgDzjSisiT28no', 'thread_1tJgR5Jn5b7Th5OMlMQx2hD1', 'thread_dWyJyyg21qDD8PipBEHVnZWd', 'thread_4upWvBkFJdJpHaPrDkC9vZr3', 'thread_HsmybCGYuMy92cjryDF5giSB', 'thread_9OfoEaj7FFq0DRS9akgiFeW1']"
9,473.4575901031494,13,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || (batchBalances[i] == _balances[_ids[i]][_owners[i]])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) _from == _to || !(0 <= j && j < _ids.length) || (__verifier_old_uint(_balances[_ids[j]][_from]) - _values[j] == _balances[_ids[j]][_from])
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from != _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]))
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_DugLtSGMlKhVKuxZZRZpKCvv', 'thread_GawNvAgJIqhqtZIdQer8kmkV', 'thread_9vff3CN4Qv8oqelw3WoM0pIV', 'thread_x279vrx25bgP8W3Q9C4i0dM4', 'thread_kxbT3SwQ2vH8J5pcLqPpkvXJ', 'thread_FYxv12c8Xra65yXVykYQhyIL']"
10,292.9935476779938,11,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == __verifier_old_uint(_balances[_id][_owner]) || !(0 <= _id && _id <= 1152921504606846975)
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    /// @notice postcondition forall (address addr) __verifier_old_bool(_operatorApprovals[addr][_operator]) || _operatorApprovals[addr][_operator] == _operatorApprovals[addr][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == __verifier_old_bool(_operatorApprovals[_owner][_operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _from || __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from]
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || __verifier_old_uint(_balances[x][_to]) == _balances[x][_to] || _from == _to
    /// @notice postcondition forall (uint x) _from != _to || _balances[x][_to] == __verifier_old_uint(_balances[x][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_from == _to) || (_balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k])
    /// @notice postcondition _to != _from
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_0oI3V395VRyyQAsB0OUrJlSY', 'thread_gJI5f16YhncmGj8qHyNMNEaw', 'thread_4lHfQONPQWIJpRhPtwvCUHPc', 'thread_tqISQVNUnoF2g0KBeVVWAcpA', 'thread_S8OB7Nglal910PUUb1DvJdGw', 'thread_VngU9vfJrB6uOHASKxxbPdqA']"
