run,time_taken,iterations,verified,annotated_contract,status
1,220.9706642627716,2,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /**
        * @notice Count all NFTs assigned to an owner
        * @dev NFTs assigned to the zero address are considered invalid, and this
        *  function throws for queries about the zero address.
        * @param _owner An address for whom to query the balance
        * @return The number of NFTs owned by `_owner`, possibly zero
        */
    /// @notice postcondition balance == _ownedTokensCount[_owner]
    function balanceOf(address _owner) external view returns (uint256 balance);

    /**
        * @notice Find the owner of an NFT
        * @dev NFTs assigned to zero address are considered invalid, and queries
        *  about them do throw.
        * @param _tokenId The identifier for an NFT
        * @return The address of the owner of the NFT
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /**
        * @notice Change or reaffirm the approved address for an NFT
        * @dev The zero address indicates there is no approved address.
        *  Throws unless `msg.sender` is the current NFT owner, or an authorized
        *  operator of the current owner.
        * @param _approved The new approved NFT controller
        * @param _tokenId The NFT to approve
        */
    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /**
        * @notice Get the approved address for a single NFT
        * @dev Throws if `_tokenId` is not a valid NFT.
        * @param _tokenId The NFT to find the approved address for
        * @return The approved address for this NFT, or the zero address if there is none
        */
    /// @notice postcondition approved == _tokenApprovals[_tokenId]
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /**
        * @notice Enable or disable approval for a third party (""operator"") to manage
        *  all of `msg.sender`'s assets
        * @dev Emits the ApprovalForAll event. The contract MUST allow
        *  multiple operators per owner.
        * @param _operator Address to add to the set of authorized operators
        * @param _approved True if the operator is approved, false to revoke approval
        */
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /**
        * @notice Query if an address is an authorized operator for another address
        * @param _owner The address that owns the NFTs
        * @param _operator The address that acts on behalf of the owner
        * @return True if `_operator` is an approved operator for `_owner`, false otherwise
        */
    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) external view returns (bool approved);

    /**
        * @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
        *  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
        *  THEY MAY BE PERMANENTLY LOST
        * @dev Throws unless `msg.sender` is the current owner, an authorized
        *  operator, or the approved address for this NFT. Throws if `_from` is
        *  not the current owner. Throws if `_to` is the zero address. Throws if
        *  `_tokenId` is not a valid NFT.
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition _from == _to || _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1
    /// @notice postcondition _from == _to || _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /**
        * @notice Transfers the ownership of an NFT from one address to another address
        * @dev This works identically to the other function with an extra data parameter,
        *  except this function just sets data to """".
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition _from == _to || _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1
    /// @notice postcondition _from == _to || _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /**
        * @notice Transfers the ownership of an NFT from one address to another address
        * @dev Throws unless `msg.sender` is the current owner, an authorized
        *  operator, or the approved address for this NFT. Throws if `_from` is
        *  not the current owner. Throws if `_to` is the zero address. Throws if
        *  `_tokenId` is not a valid NFT. When transfer is complete, this function
        *  checks if `_to` is a smart contract (code size > 0). If so, it calls
        *  `onERC721Received` on `_to` and throws if the return value is not
        *  `bytes4(keccak256(""onERC721Received(address,address,uint256,bytes)""))`.
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        * @param data Additional data with no specified format, sent in call to `_to`
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition _from == _to || _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1
    /// @notice postcondition _from == _to || _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
","[""Interaction: 2\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: ERROR\n - ERC721_merge.sol:112:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\n - ERC721_merge.sol:112:5: Postcondition '_ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1' might not hold at end of function.\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
2,494.57531809806824,10,False,,"[""Interaction: 2\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\n - ERC721_merge.sol:98:5: Postcondition '_tokenOwner[_tokenId] == _from' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_to == address(0) || _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_to == address(0) || _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_to != address(0) && __verifier_old_uint(_ownedTokensCount[_to]) + 1 == _ownedTokensCount[_to]' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_to == address(0) || _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
3,314.8869242668152,5,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /**
        * @notice Count all NFTs assigned to an owner
        * @dev NFTs assigned to the zero address are considered invalid, and this
        *  function throws for queries about the zero address.
        * @param _owner An address for whom to query the balance
        * @return The number of NFTs owned by `_owner`, possibly zero
        */
    /// @notice postcondition _owner != address(0) || balance == 0
    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /**
        * @notice Find the owner of an NFT
        * @dev NFTs assigned to zero address are considered invalid, and queries
        *  about them do throw.
        * @param _tokenId The identifier for an NFT
        * @return The address of the owner of the NFT
        */
    /// @notice postcondition _tokenId == 0 || _owner == _tokenOwner[_tokenId]
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /**
        * @notice Change or reaffirm the approved address for an NFT
        * @dev The zero address indicates there is no approved address.
        *  Throws unless `msg.sender` is the current NFT owner, or an authorized
        *  operator of the current owner.
        * @param _approved The new approved NFT controller
        * @param _tokenId The NFT to approve
        */
    /// @notice postcondition _tokenOwner[_tokenId] == __verifier_old_address(_tokenOwner[_tokenId]) || _approved == address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /**
        * @notice Get the approved address for a single NFT
        * @dev Throws if `_tokenId` is not a valid NFT.
        * @param _tokenId The NFT to find the approved address for
        * @return The approved address for this NFT, or the zero address if there is none
        */
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /**
        * @notice Enable or disable approval for a third party (""operator"") to manage
        *  all of `msg.sender`'s assets
        * @dev Emits the ApprovalForAll event. The contract MUST allow
        *  multiple operators per owner.
        * @param _operator Address to add to the set of authorized operators
        * @param _approved True if the operator is approved, false to revoke approval
        */
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /**
        * @notice Query if an address is an authorized operator for another address
        * @param _owner The address that owns the NFTs
        * @param _operator The address that acts on behalf of the owner
        * @return True if `_operator` is an approved operator for `_owner`, false otherwise
        */
    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) external view returns (bool approved);

    /**
        * @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
        *  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
        *  THEY MAY BE PERMANENTLY LOST
        * @dev Throws unless `msg.sender` is the current owner, an authorized
        *  operator, or the approved address for this NFT. Throws if `_from` is
        *  not the current owner. Throws if `_to` is the zero address. Throws if
        *  `_tokenId` is not a valid NFT.
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 || _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from])
    /// @notice postcondition _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 || _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to])
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /**
        * @notice Transfers the ownership of an NFT from one address to another address
        * @dev This works identically to the other function with an extra data parameter,
        *  except this function just sets data to """".
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 || _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from])
    /// @notice postcondition _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 || _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to])
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /**
        * @notice Transfers the ownership of an NFT from one address to another address
        * @dev Throws unless `msg.sender` is the current owner, an authorized
        *  operator, or the approved address for this NFT. Throws if `_from` is
        *  not the current owner. Throws if `_to` is the zero address. Throws if
        *  `_tokenId` is not a valid NFT. When transfer is complete, this function
        *  checks if `_to` is a smart contract (code size > 0). If so, it calls
        *  `onERC721Received` on `_to` and throws if the return value is not
        *  `bytes4(keccak256(""onERC721Received(address,address,uint256,bytes)""))`.
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        * @param data Additional data with no specified format, sent in call to `_to`
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 || _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from])
    /// @notice postcondition _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 || _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to])
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
","[""Interaction: 2\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: ERROR\n - ERC721_merge.sol:52:5: Postcondition '_tokenId != 0 || _owner == address(0)' might not hold at end of function.\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\n - ERC721_merge.sol:98:5: Postcondition '_tokenOwner[_tokenId] == _from' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:96:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:96:5: Postcondition '_ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + (msg.sender == _to ? 1 : 0)' might not hold at end of function.\n - ERC721_merge.sol:96:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - (msg.sender == _from ? 1 : 0)' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:96:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
4,498.4101564884186,10,False,,"[""Interaction: 3\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:94:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:94:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - ( _tokenOwner[_tokenId] == _from ? 1 : 0 )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:94:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - ( _tokenOwner[_tokenId] == _from ? 1 : 0 ) || _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from])' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:94:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - ( _tokenOwner[_tokenId] == _from ? 1 : 0 ) || _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from])' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
5,546.4001767635345,10,False,,"[""Interaction: 2\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nError while running verifier, details:\n----- Verifier output -----\n\n---------------------------\nERC165::supportsInterface: OK\n[event] ERC721::ApprovalForAll: ERROR\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_tokenOwner[_tokenId] == _from' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_tokenOwner[_tokenId] == _from' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_tokenOwner[_tokenId] == _from' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:97:5: Postcondition '_ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:59:5: Postcondition '(msg.sender == _tokenOwner[_tokenId] || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]) && _tokenApprovals[_tokenId] == _approved' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:59:5: Postcondition '(msg.sender == _tokenOwner[_tokenId] || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]) && (_tokenApprovals[_tokenId] == _approved || _tokenApprovals[_tokenId] == __verifier_old_address(_tokenApprovals[_tokenId]))' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
6,507.5960068702698,10,False,,"[""Interaction: 2\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:97:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:97:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:97:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:97:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '(msg.sender == _tokenOwner[_tokenId] || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]) ' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '(msg.sender == _tokenOwner[_tokenId] || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]) ' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:97:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
7,478.60041093826294,10,False,,"[""Interaction: 2\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_tokenOwner[_tokenId] == _from' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:98:5: Postcondition '_tokenOwner[_tokenId] == _from || _tokenOwner[_tokenId] == __verifier_old_address(_tokenOwner[_tokenId])' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:96:5: Postcondition '(_tokenOwner[_tokenId] == _from && _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1) || (_tokenOwner[_tokenId] == __verifier_old_address(_tokenOwner[_tokenId]))' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:96:5: Postcondition '(_tokenOwner[_tokenId] == _from && _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1) || (_tokenOwner[_tokenId] == __verifier_old_address(_tokenOwner[_tokenId]))' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:96:5: Postcondition '(_tokenOwner[_tokenId] == _from && _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1) || (_tokenOwner[_tokenId] == __verifier_old_address(_tokenOwner[_tokenId]))' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:96:5: Postcondition '(_tokenOwner[_tokenId] == _from && _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1) || (_tokenOwner[_tokenId] == __verifier_old_address(_tokenOwner[_tokenId]))' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
8,459.62396144866943,10,False,,"[""Interaction: 2\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _operatorApprovals[_tokenOwner[_tokenId]][msg.sender]' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:99:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - ( _tokenOwner[_tokenId] == _from ? 1 : 0 )' might not hold at end of function.\n - ERC721_merge.sol:99:5: Postcondition '_tokenOwner[_tokenId] == _from || _from == address(0)' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ERC721_merge.sol:99:5: Postcondition '_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - ( _tokenOwner[_tokenId] == _from ? 1 : 0 )' might not hold at end of function.\n - ERC721_merge.sol:99:5: Postcondition '_tokenOwner[_tokenId] == _from || _from == address(0)' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
9,168.56017756462097,2,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /**
        * @notice Count all NFTs assigned to an owner
        * @dev NFTs assigned to the zero address are considered invalid, and this
        *  function throws for queries about the zero address.
        * @param _owner An address for whom to query the balance
        * @return The number of NFTs owned by `_owner`, possibly zero
        */
    /// @notice postcondition balance == _ownedTokensCount[_owner]
    function balanceOf(address _owner) external view returns (uint256 balance);

    /**
        * @notice Find the owner of an NFT
        * @dev NFTs assigned to zero address are considered invalid, and queries
        *  about them do throw.
        * @param _tokenId The identifier for an NFT
        * @return The address of the owner of the NFT
        */
    /// @notice postcondition _owner == _tokenOwner[_tokenId]
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /**
        * @notice Change or reaffirm the approved address for an NFT
        * @dev The zero address indicates there is no approved address.
        *  Throws unless `msg.sender` is the current NFT owner, or an authorized
        *  operator of the current owner.
        * @param _approved The new approved NFT controller
        * @param _tokenId The NFT to approve
        */
    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /**
        * @notice Get the approved address for a single NFT
        * @dev Throws if `_tokenId` is not a valid NFT.
        * @param _tokenId The NFT to find the approved address for
        * @return The approved address for this NFT, or the zero address if there is none
        */
    /// @notice postcondition approved == _tokenApprovals[_tokenId]
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /**
        * @notice Enable or disable approval for a third party (""operator"") to manage
        *  all of `msg.sender`'s assets
        * @dev Emits the ApprovalForAll event. The contract MUST allow
        *  multiple operators per owner.
        * @param _operator Address to add to the set of authorized operators
        * @param _approved True if the operator is approved, false to revoke approval
        */
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /**
        * @notice Query if an address is an authorized operator for another address
        * @param _owner The address that owns the NFTs
        * @param _operator The address that acts on behalf of the owner
        * @return True if `_operator` is an approved operator for `_owner`, false otherwise
        */
    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) external view returns (bool approved);

    /**
        * @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
        *  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
        *  THEY MAY BE PERMANENTLY LOST
        * @dev Throws unless `msg.sender` is the current owner, an authorized
        *  operator, or the approved address for this NFT. Throws if `_from` is
        *  not the current owner. Throws if `_to` is the zero address. Throws if
        *  `_tokenId` is not a valid NFT.
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - ( _from == _to ? 0 : 1 )
    /// @notice postcondition _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + ( _from == _to ? 0 : 1 )
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /**
        * @notice Transfers the ownership of an NFT from one address to another address
        * @dev This works identically to the other function with an extra data parameter,
        *  except this function just sets data to """".
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - ( _from == _to ? 0 : 1 )
    /// @notice postcondition _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + ( _from == _to ? 0 : 1 )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /**
        * @notice Transfers the ownership of an NFT from one address to another address
        * @dev Throws unless `msg.sender` is the current owner, an authorized
        *  operator, or the approved address for this NFT. Throws if `_from` is
        *  not the current owner. Throws if `_to` is the zero address. Throws if
        *  `_tokenId` is not a valid NFT. When transfer is complete, this function
        *  checks if `_to` is a smart contract (code size > 0). If so, it calls
        *  `onERC721Received` on `_to` and throws if the return value is not
        *  `bytes4(keccak256(""onERC721Received(address,address,uint256,bytes)""))`.
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        * @param data Additional data with no specified format, sent in call to `_to`
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - ( _from == _to ? 0 : 1 )
    /// @notice postcondition _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + ( _from == _to ? 0 : 1 )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
","['Interaction: 2\nAddress.sol:14:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\nAddress.sol:15:9: Warning: Unused local variable.\nAddress.sol:14:5: Warning: Function state mutability can be restricted to pure\nError while running verifier, details:\n----- Verifier output -----\n\n---------------------------\nAddress::isContract: ERROR\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n']"
10,102.49565649032593,1,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /**
        * @notice Count all NFTs assigned to an owner
        * @dev NFTs assigned to the zero address are considered invalid, and this
        *  function throws for queries about the zero address.
        * @param _owner An address for whom to query the balance
        * @return The number of NFTs owned by `_owner`, possibly zero
        */
    /// @notice postcondition balance == _ownedTokensCount[_owner]
    function balanceOf(address _owner) external view returns (uint256 balance);

    /**
        * @notice Find the owner of an NFT
        * @dev NFTs assigned to zero address are considered invalid, and queries
        *  about them do throw.
        * @param _tokenId The identifier for an NFT
        * @return The address of the owner of the NFT
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /**
        * @notice Change or reaffirm the approved address for an NFT
        * @dev The zero address indicates there is no approved address.
        *  Throws unless `msg.sender` is the current NFT owner, or an authorized
        *  operator of the current owner.
        * @param _approved The new approved NFT controller
        * @param _tokenId The NFT to approve
        */
    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /**
        * @notice Get the approved address for a single NFT
        * @dev Throws if `_tokenId` is not a valid NFT.
        * @param _tokenId The NFT to find the approved address for
        * @return The approved address for this NFT, or the zero address if there is none
        */
    /// @notice postcondition approved == _tokenApprovals[_tokenId]
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /**
        * @notice Enable or disable approval for a third party (""operator"") to manage
        *  all of `msg.sender`'s assets
        * @dev Emits the ApprovalForAll event. The contract MUST allow
        *  multiple operators per owner.
        * @param _operator Address to add to the set of authorized operators
        * @param _approved True if the operator is approved, false to revoke approval
        */
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /**
        * @notice Query if an address is an authorized operator for another address
        * @param _owner The address that owns the NFTs
        * @param _operator The address that acts on behalf of the owner
        * @return True if `_operator` is an approved operator for `_owner`, false otherwise
        */
    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /**
        * @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
        *  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
        *  THEY MAY BE PERMANENTLY LOST
        * @dev Throws unless `msg.sender` is the current owner, an authorized
        *  operator, or the approved address for this NFT. Throws if `_from` is
        *  not the current owner. Throws if `_to` is the zero address. Throws if
        *  `_tokenId` is not a valid NFT.
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition (_from == _to) || (_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1)
    /// @notice postcondition (_from == _to) || (_ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1)
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /**
        * @notice Transfers the ownership of an NFT from one address to another address
        * @dev This works identically to the other function with an extra data parameter,
        *  except this function just sets data to """".
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition (_from == _to) || (_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1)
    /// @notice postcondition (_from == _to) || (_ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1)
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /**
        * @notice Transfers the ownership of an NFT from one address to another address
        * @dev Throws unless `msg.sender` is the current owner, an authorized
        *  operator, or the approved address for this NFT. Throws if `_from` is
        *  not the current owner. Throws if `_to` is the zero address. Throws if
        *  `_tokenId` is not a valid NFT. When transfer is complete, this function
        *  checks if `_to` is a smart contract (code size > 0). If so, it calls
        *  `onERC721Received` on `_to` and throws if the return value is not
        *  `bytes4(keccak256(""onERC721Received(address,address,uint256,bytes)""))`.
        * @param _from The current owner of the NFT
        * @param _to The new owner
        * @param _tokenId The NFT to transfer
        * @param data Additional data with no specified format, sent in call to `_to`
        */
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    /// @notice postcondition (_from == _to) || (_ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1)
    /// @notice postcondition (_from == _to) || (_ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1)
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
