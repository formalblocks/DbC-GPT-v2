run,time_taken,iterations,verified,annotated_contract,status
1,485.1756784915924,10,False,,"[""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _from != msg.sender' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to != msg.sender && _value <= _balances[msg.sender]) || (_to == msg.sender && _value == 0)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to == msg.sender && _value == 0) || (_to != msg.sender && _value <= _balances[msg.sender])' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to == msg.sender && _value == 0) || (_to != msg.sender && _value <= __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to == msg.sender && _value == 0) || (_to != msg.sender && _value <= __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to == msg.sender && _value == 0) || (_to != msg.sender && _value <= __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
2,388.60273003578186,7,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _balances[_to] == __verifier_old_uint(_balances[_to]) || _value == 0
    /// @notice postcondition _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || _value == 0
    /// @notice postcondition _balances[msg.sender] >= 0
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _balances[_to] == __verifier_old_uint(_balances[_to]) || _value == 0
    /// @notice postcondition _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0
    /// @notice postcondition _balances[_from] >= 0
    /// @notice postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) || _value == 0
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value || __verifier_old_uint(_allowed[msg.sender][_spender]) == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
3,412.3538990020752,10,False,,"[""Interaction: 2\nError while running verifier, details:\n----- Verifier output -----\nIllegal instruction\n\n---------------------------\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition 'success == (_value == 0 || _balances[msg.sender] >= __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:106:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != _to && success || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\n - ERC20_merge.sol:106:5: Postcondition 'success == (_value == 0 || _balances[_from] >= __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nSafeMath::div: ERROR\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition 'success == true && _value > 0 && _balances[msg.sender] >= __verifier_old_uint(_balances[msg.sender]) || success == false' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:106:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != _to && success || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\n - ERC20_merge.sol:106:5: Postcondition 'success == true && _value > 0 && _balances[_from] >= __verifier_old_uint(_balances[_from]) || success == false' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition 'success == true && _value > 0 && __verifier_old_uint(_balances[msg.sender]) > _value || success == false' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:106:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != _to && success || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\n - ERC20_merge.sol:106:5: Postcondition 'success == true && _value > 0 && __verifier_old_uint(_balances[_from]) > _value || success == false' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:106:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != _to && success || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\n - ERC20_merge.sol:106:5: Postcondition 'success == true && _value <= __verifier_old_uint(_balances[_from]) && _allowed[_from][msg.sender] >= __verifier_old_uint(_allowed[_from][msg.sender]) || success == false' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:106:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\n - ERC20_merge.sol:106:5: Postcondition 'success == true && _value <= __verifier_old_uint(_balances[_from]) && _allowed[_from][msg.sender] >= __verifier_old_uint(_allowed[_from][msg.sender]) || success == false' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:106:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:106:5: Postcondition 'success == true && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:106:5: Postcondition 'success == true && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:106:5: Postcondition 'success == true && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
4,434.42598485946655,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to && success' might not hold at end of function.\n - ERC20_merge.sol:73:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) && msg.sender == _to && _value == 0 && success' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:109:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:109:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && success && _from == msg.sender && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(msg.sender == _to && success) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == msg.sender) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == _to) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(msg.sender == _to && success) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == msg.sender) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == _to) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(success && msg.sender == _to) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == msg.sender) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == _to) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(msg.sender == _to && success) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == msg.sender) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == _to) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(msg.sender == _to && success) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from != msg.sender) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == _to) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(msg.sender == _to && success) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0 || !success' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == msg.sender) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == _to) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(msg.sender == _to && success) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from != msg.sender) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:109:5: Postcondition '!(success && _from == _to) || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
5,100.30697274208069,1,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _value == 0
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && success && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender && success && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && success && _value == 0
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) && success || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _to == msg.sender && _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _value <= 0 && success
    /// @notice postcondition _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _to != _from && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && success && _to == _from && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && success && _value <= 0
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && success && _to != _from && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && success && _to == _from && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && success && _value <= 0
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition success == true
    /// @notice postcondition _allowed[msg.sender][_spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
6,443.2299163341522,10,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) && success || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _to == msg.sender && _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0
    /// @notice postcondition _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _value == 0
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && success && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender && success && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && success && _value == 0
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _to != _from && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && success && _to == _from && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && success && _value <= 0
    /// @notice postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _value <= 0 && success
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && success && _to != _from && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && success && _to == _from && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && success && _value <= 0
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition _allowed[msg.sender][_spender] == _value
    /// @notice postcondition success == true
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
7,402.8787190914154,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:73:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != msg.sender || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success || _balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:74:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:74:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:110:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != msg.sender || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:110:5: Postcondition '_from == msg.sender || _allowed[_from][msg.sender] >= _value || !success' might not hold at end of function.\n - ERC20_merge.sol:110:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success || _balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:75:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:75:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:111:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != msg.sender || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:111:5: Postcondition '_from == msg.sender || _allowed[_from][msg.sender] >= _value || !success' might not hold at end of function.\n - ERC20_merge.sol:111:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _from != msg.sender || _balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:76:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:76:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:113:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != msg.sender || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:113:5: Postcondition '_from == msg.sender || _allowed[_from][msg.sender] >= _value || !success' might not hold at end of function.\n - ERC20_merge.sol:113:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _from != msg.sender || _balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:77:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:77:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:115:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != msg.sender || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:115:5: Postcondition '_from == msg.sender || _allowed[_from][msg.sender] >= _value || !success' might not hold at end of function.\n - ERC20_merge.sol:115:5: Postcondition '_balances[_from] >= __verifier_old_uint(_balances[_from]) || !success' might not hold at end of function.\n - ERC20_merge.sol:115:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _from != msg.sender || _balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:77:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:77:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:114:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != msg.sender || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:114:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _from != msg.sender || _balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\n - ERC20_merge.sol:114:5: Postcondition '_balances[_from] >= __verifier_old_uint(_balances[_from]) || !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:76:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:76:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:112:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != msg.sender || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:112:5: Postcondition '_balances[_from] >= __verifier_old_uint(_balances[_from]) || !success' might not hold at end of function.\n - ERC20_merge.sol:112:5: Postcondition '_from == msg.sender || _allowed[_from][msg.sender] >= _value || !success' might not hold at end of function.\n - ERC20_merge.sol:112:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _from != msg.sender || _balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:76:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:76:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:112:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != msg.sender || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:112:5: Postcondition '_balances[_from] >= __verifier_old_uint(_balances[_from]) || !success' might not hold at end of function.\n - ERC20_merge.sol:112:5: Postcondition '_from == msg.sender || _allowed[_from][msg.sender] >= _value || !success' might not hold at end of function.\n - ERC20_merge.sol:112:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _from != msg.sender || _balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:77:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:77:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:114:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != msg.sender || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender' might not hold at end of function.\n - ERC20_merge.sol:114:5: Postcondition '_balances[_from] >= __verifier_old_uint(_balances[_from]) || !success' might not hold at end of function.\n - ERC20_merge.sol:114:5: Postcondition '_from == msg.sender || _allowed[_from][msg.sender] >= _value || !success' might not hold at end of function.\n - ERC20_merge.sol:114:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _from != msg.sender || _balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
8,269.4878866672516,8,False,,"[""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:103:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to && _value > 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:105:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value' might not hold at end of function.\n - ERC20_merge.sol:105:5: Postcondition '_from == _to || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition '_from == _to || _value == 0' might not hold at end of function.\n - ERC20_merge.sol:107:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition '_from == _to || _value == 0' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition '_from == _to || _value == 0' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\n - ERC20_merge.sol:107:5: Postcondition '_from == _to || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:74:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value' might not hold at end of function.\n - ERC20_merge.sol:74:5: Postcondition '_balances[msg.sender] >= __verifier_old_uint(_balances[msg.sender]) || _value == 0 || _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _allowed[_from][msg.sender] >= _value)' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] >= __verifier_old_uint(_balances[_from]) || _value == 0 || !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
9,274.3776614665985,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value) && _balances[_from] >= _value || _from != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value) && _balances[_from] >= _value || _from != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to != msg.sender && _balances[msg.sender] >= _value) || (_to == msg.sender && _value <= _balances[msg.sender])' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition 'success == (_from == msg.sender || _allowed[_from][msg.sender] >= _value) && _balances[_from] >= _value || _from != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to != msg.sender && _balances[msg.sender] >= _value) || (_to == msg.sender && _value <= _balances[msg.sender])' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to != msg.sender && _balances[msg.sender] >= _value) || (_to == msg.sender && _value <= _balances[msg.sender])' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to != msg.sender && _balances[msg.sender] >= _value) || (_to == msg.sender && _value <= _balances[msg.sender])' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to != msg.sender && _balances[msg.sender] >= _value) || (_to == msg.sender && _value <= _balances[msg.sender])' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to != msg.sender && _balances[msg.sender] >= _value) || (_to == msg.sender && _value <= _balances[msg.sender])' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition 'success == (_to != msg.sender && _balances[msg.sender] >= _value) || (_to == msg.sender && _value <= _balances[msg.sender])' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to == msg.sender && _value > 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != msg.sender' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success && _from != _to || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
10,266.8567473888397,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to != msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) - _value && _to == msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to == msg.sender && _value > 0' might not hold at end of function.\nERC20::approve: ERROR\n - ERC20_merge.sol:86:5: Postcondition '_allowed[msg.sender][_spender] == _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) + _value && _value > 0' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _value == 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) + _value && _from == msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from != msg.sender && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to != msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) - _value && _to == msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender && _value == 0' might not hold at end of function.\nERC20::approve: ERROR\n - ERC20_merge.sol:86:5: Postcondition '_allowed[msg.sender][_spender] == _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == 0 || _allowed[msg.sender][_spender] != __verifier_old_uint(_allowed[msg.sender][_spender]) && _value > 0 && _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) + _value || _allowed[msg.sender][_spender] != __verifier_old_uint(_allowed[msg.sender][_spender]) && _value < __verifier_old_uint(_allowed[msg.sender][_spender]) && _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) - _value' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _value == 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) + _value && _from == msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from != msg.sender && _value == 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from != msg.sender && _value > 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to != msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) - _value && _to == msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender && _value == 0' might not hold at end of function.\nERC20::approve: ERROR\n - ERC20_merge.sol:86:5: Postcondition '_allowed[msg.sender][_spender] == _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) + _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) - _value && _value < __verifier_old_uint(_allowed[msg.sender][_spender])' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _value == 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) + _value && _from == msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from != msg.sender && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to != msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) - _value && _to == msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender && _value == 0' might not hold at end of function.\nERC20::approve: ERROR\n - ERC20_merge.sol:87:5: Postcondition '_allowed[msg.sender][_spender] == _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) + _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value < __verifier_old_uint(_allowed[msg.sender][_spender]) || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) - _value && _value < __verifier_old_uint(_allowed[msg.sender][_spender])' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _value == 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) + _value && _from == msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from != msg.sender && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to != msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) - _value && _to == msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender && _value == 0' might not hold at end of function.\nERC20::approve: ERROR\n - ERC20_merge.sol:87:5: Postcondition '_allowed[msg.sender][_spender] == _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) + _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) - _value && _value < __verifier_old_uint(_allowed[msg.sender][_spender]) || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value < __verifier_old_uint(_allowed[msg.sender][_spender])' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _value == 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) + _value && _from == msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from != msg.sender && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to != msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) - _value && _to == msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender && _value == 0' might not hold at end of function.\nERC20::approve: ERROR\n - ERC20_merge.sol:87:5: Postcondition '_allowed[msg.sender][_spender] == _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) + _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) - _value && _value < __verifier_old_uint(_allowed[msg.sender][_spender]) || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value < __verifier_old_uint(_allowed[msg.sender][_spender])' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _value == 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) + _value && _from == msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from != msg.sender && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to != msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) - _value && _to == msg.sender && _value > 0' might not hold at end of function.\nERC20::approve: ERROR\n - ERC20_merge.sol:87:5: Postcondition '_allowed[msg.sender][_spender] == _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) + _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) - _value && _value < __verifier_old_uint(_allowed[msg.sender][_spender]) || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value < __verifier_old_uint(_allowed[msg.sender][_spender])' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _value == 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) + _value && _from == msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from != msg.sender && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: ERROR\n - ERC20_merge.sol:87:5: Postcondition '_allowed[msg.sender][_spender] == _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) + _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) - _value && _value < __verifier_old_uint(_allowed[msg.sender][_spender]) || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value < __verifier_old_uint(_allowed[msg.sender][_spender])' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _value == 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) + _value && _from == msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from != msg.sender && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _to != msg.sender && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to != msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _to == msg.sender && _value == 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) - _value && _to == msg.sender && _value > 0' might not hold at end of function.\nERC20::approve: ERROR\n - ERC20_merge.sol:87:5: Postcondition '_allowed[msg.sender][_spender] == _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) + _value && _value > 0 || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) - _value && _value < __verifier_old_uint(_allowed[msg.sender][_spender]) || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value < __verifier_old_uint(_allowed[msg.sender][_spender]) || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == __verifier_old_uint(_allowed[msg.sender][_spender])' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _value == 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) + _value && _from == msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from != msg.sender && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
