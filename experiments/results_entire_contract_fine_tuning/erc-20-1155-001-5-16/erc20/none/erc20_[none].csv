run,time_taken,iterations,verified,annotated_contract,status
1,406.64644479751587,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _value > 0 && msg.sender != _to || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:104:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _value > 0 && msg.sender != _from || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:104:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _value > 0 && msg.sender == _from || _balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && msg.sender == _to && _value > 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:106:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _from && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:106:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender == _from && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:106:5: Postcondition ' _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _value > 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _value > 0 && msg.sender != _to || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:104:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _value > 0 && msg.sender != _from || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:104:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender == _from && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && msg.sender != _from && _value > 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:103:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _value > 0 && msg.sender != _from || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0 || _to == msg.sender && _value > 0' might not hold at end of function.\n - ERC20_merge.sol:103:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender == _from && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && msg.sender != _from && _value > 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:105:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _value > 0 && msg.sender != _from || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:105:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) && msg.sender != _from && _value > 0' might not hold at end of function.\n - ERC20_merge.sol:105:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender == _from && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:105:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _from && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:105:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender == _from && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:105:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) && msg.sender != _from && _value > 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:103:5: Postcondition '(_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender == _from && _value > 0) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && msg.sender != _from && _value > 0)' might not hold at end of function.\n - ERC20_merge.sol:103:5: Postcondition '(_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _from && _value > 0) || (_balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0) || (_to == msg.sender && _value > 0)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:103:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _from && _value > 0 || _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0 || (_to == msg.sender && _value > 0 && __verifier_old_uint(_allowed[_from][msg.sender]) >= _value)' might not hold at end of function.\n - ERC20_merge.sol:103:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender == _from && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0 || (_balances[_from] == __verifier_old_uint(_balances[_from]) && msg.sender != _from && _value > 0 && __verifier_old_uint(_allowed[_from][msg.sender]) >= _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:103:5: Postcondition '(_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _value > 0 && msg.sender != _from) || (_balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0) || (_to == msg.sender && _value > 0)' might not hold at end of function.\n - ERC20_merge.sol:103:5: Postcondition '(_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender == _from && _value > 0) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && msg.sender != _from && _value > 0 && __verifier_old_uint(_allowed[_from][msg.sender]) >= _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
2,421.34266901016235,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || (_value == 0 && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:104:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value || (_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:104:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value || (msg.sender == _from && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:104:5: Postcondition '(_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from])) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _allowed[_from][msg.sender] >= _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:103:5: Postcondition '(_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from])) || (_allowed[_from][msg.sender] >= __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:103:5: Postcondition '_allowed[_from][msg.sender] >= __verifier_old_uint(_allowed[_from][msg.sender]) && (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:104:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _from == msg.sender && _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:104:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value || (_allowed[_from][msg.sender] >= __verifier_old_uint(_allowed[_from][msg.sender]) && _from == msg.sender && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:104:5: Postcondition '(_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from])) || (_allowed[_from][msg.sender] >= __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:104:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value || (_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from])) || (_from == msg.sender && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
3,334.42816281318665,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && (_value == 0 || _to == msg.sender)' might not hold at end of function.\n - ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0' might not hold at end of function.\n - ERC20_merge.sol:107:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != msg.sender && _value > 0' might not hold at end of function.\n - ERC20_merge.sol:107:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && (_value == 0 || _from == msg.sender)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender && _value > 0' might not hold at end of function.\n - ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && (_value == 0 || _to == msg.sender)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != msg.sender && _value > 0' might not hold at end of function.\n - ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && (_value == 0 || _from == msg.sender)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _value > 0 && _to != msg.sender || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:104:5: Postcondition '_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _from != msg.sender && _value > 0 || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _value == 0' might not hold at end of function.\n - ERC20_merge.sol:104:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != msg.sender && _value > 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:103:5: Postcondition '(_value == 0 || _from == msg.sender) ? (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_from] == __verifier_old_uint(_balances[_from])) : true' might not hold at end of function.\n - ERC20_merge.sol:103:5: Postcondition '(_value > 0 && _from != msg.sender) ? (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : true' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(_value > 0 && _from != msg.sender) ? (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
4,458.12987756729126,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_value == 0 || !(success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_value == 0 || !(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '!(success) || (_value == 0) || (_balances[address(this)] == __verifier_old_uint(_balances[address(this)]) - _value && msg.sender == address(this)) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != address(this))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '!(success) || (_value == 0) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender == address(this)) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && msg.sender != address(this))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_value == 0 || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && !success)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_value == 0 || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && !success)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_value == 0 || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && !success) ' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_value == 0 || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && !success)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_value == 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && !success' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_value == 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _balances[_from] == __verifier_old_uint(_balances[_from]) && !success' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '(_value == 0) || (success && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != address(0)) || (!success && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(_value == 0) || (success && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != address(0)) || (!success && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_value == 0 || (success && _to != address(0) && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || (!success && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_value == 0 || (success && _from != address(0) && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || (!success && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_value == 0 || (success && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != address(0)) || (!success && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _to != address(0))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_value == 0 || (success && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != address(0)) || (!success && _balances[_from] == __verifier_old_uint(_balances[_from]) && _from != address(0))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_value == 0 || (success && _to != address(0) && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || (!success && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_value == 0 || (success && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || (!success && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
5,114.39920592308044,3,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _value == 0 || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && success && msg.sender != _to) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && !success) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _value == 0 || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success && _from != _to) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && !success) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from]))
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition !success || _allowed[msg.sender][_spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_value == 0 || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && !success)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_value == 0 || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && !success)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
6,446.1500656604767,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition 'success ? (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _balances[_to] == __verifier_old_uint(_balances[_to]) )' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition 'success ? (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (_balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to]) && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition 'success ? (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _balances[_to] == __verifier_old_uint(_balances[_to]) )' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition 'success ? (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (_balances[_from] == __verifier_old_uint(_balances[_from]) && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition 'success ? (_value == 0 || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (msg.sender == _to && _value == 0 && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition 'success ? (_value == 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (_from == msg.sender && _value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]) && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(msg.sender != _from && _value > 0) ? (success && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (success && _balances[_from] == __verifier_old_uint(_balances[_from]) && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(msg.sender != _from && _value > 0) ? (success && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (success && _balances[_from] == __verifier_old_uint(_balances[_from]) && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(msg.sender != _from && _value > 0) ? (success && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (success && _balances[_from] == __verifier_old_uint(_balances[_from]) && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(msg.sender != _from) ? (success ? (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) : (_balances[_from] == __verifier_old_uint(_balances[_from]) && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_to] == __verifier_old_uint(_balances[_to])) ) : (success && _from == msg.sender && _balances[_from] == __verifier_old_uint(_balances[_from]) && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && _balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
7,365.1575222015381,10,False,,"[""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '(_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender != _from && _value > 0) || (_balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0) || (msg.sender == _from && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '(_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && msg.sender != _from && _value > 0) || _from == msg.sender || (_balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0)' might not hold at end of function.\n - ERC20_merge.sol:102:5: Postcondition '(_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _from && _value > 0) || (_balances[_to] == __verifier_old_uint(_balances[_to]) && _value == 0) || (msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to])) || (msg.sender != _from && msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) || (msg.sender != _from && msg.sender != _to && _balances[_to] == __verifier_old_uint(_balances[_to]) && _balances[_from] == __verifier_old_uint(_balances[_from])) || (msg.sender == _from && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to])) || (msg.sender != _from && msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) || (msg.sender != _from && msg.sender != _to && _balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to])) || (msg.sender == _from && _balances[_from] == __verifier_old_uint(_balances[_from]) && _value > 0)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to])) || (msg.sender == _from && _balances[_from] == __verifier_old_uint(_balances[_from])) || (msg.sender != _from && _balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to])) || (msg.sender != _from && msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to])) || (msg.sender == _from && _balances[_from] == __verifier_old_uint(_balances[_from])) || (msg.sender != _from && ((msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) || (msg.sender != _to && _balances[_from] == __verifier_old_uint(_balances[_from])))) ' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to])) || (msg.sender != _from && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender == _to) || (msg.sender != _from && msg.sender != _to && _balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to])) || (msg.sender == _from && _balances[_from] == __verifier_old_uint(_balances[_from])) || (msg.sender != _from && ((msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _value > 0) || (msg.sender != _to && _balances[_from] == __verifier_old_uint(_balances[_from]) && _value > 0)))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
8,103.70543122291565,3,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition (_value == 0 && _balances[_to] == __verifier_old_uint(_balances[_to])) || (_value > 0 && _balances[msg.sender] >= __verifier_old_uint(_balances[msg.sender]) && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value + (_to == msg.sender ? _value : 0) && _to != msg.sender) || (_value > 0 && _balances[_to] == __verifier_old_uint(_balances[_to]) + (_to == msg.sender ? 0 : _value)) 
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition (_value == 0 && _balances[_to] == __verifier_old_uint(_balances[_to])) || (_value > 0 && _balances[_from] >= __verifier_old_uint(_balances[_from]) && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value + (_to == _from ? _value : 0) && _to != _from) || (_value > 0 && _balances[_to] == __verifier_old_uint(_balances[_to]) + (_to == _from ? 0 : _value))
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '_value == 0 || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender) || (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '_value == 0 || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _to != _from) || (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:70:5: Postcondition '(_value == 0 && _balances[_to] == __verifier_old_uint(_balances[_to])) || (_value > 0 && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _to != msg.sender) || (_value > 0 && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:101:5: Postcondition '(_value == 0 && _balances[_to] == __verifier_old_uint(_balances[_to])) || (_value > 0 && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _to != _from) || (_value > 0 && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
9,72.99031901359558,2,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition (_value == 0 && _balances[_to] == __verifier_old_uint(_balances[_to]) && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) || (_value > 0 && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) || (_value > 0 && msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition (_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]) && _balances[_to] == __verifier_old_uint(_balances[_to])) || (_value > 0 && _balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) || (_value > 0 && _from == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) 
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && _value == 0
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ERC20_merge.sol:71:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value  || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) && _value == 0) || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:103:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from]) && _value == 0) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
10,139.45763397216797,4,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _to == msg.sender || (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && __verifier_old_uint(_balances[msg.sender]) >= _value) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _from == msg.sender || (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && __verifier_old_uint(_balances[_from]) >= _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) || (_from != msg.sender && __verifier_old_uint(_allowed[_from][msg.sender]) >= _value && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '_from == msg.sender || __verifier_old_uint(_balances[_from]) >= _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '_from == msg.sender || (__verifier_old_uint(_balances[_from]) >= _value && _balances[_to] == __verifier_old_uint(_balances[_to]) + _value) || (_from == msg.sender && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ERC20_merge.sol:102:5: Postcondition '(_from == msg.sender && _balances[_from] == __verifier_old_uint(_balances[_from])) || (_from != msg.sender && __verifier_old_uint(_allowed[_from][msg.sender]) >= _value && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) ' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
