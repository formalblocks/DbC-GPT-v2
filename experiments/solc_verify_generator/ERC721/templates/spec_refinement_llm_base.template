
contract Refinement {

    struct StateOld {
        mapping (uint256 => address) _tokenOwner;
        mapping (uint256 => address) _tokenApprovals;
        mapping (address => uint256) _ownedTokensCount;
        mapping (address => mapping (address => bool)) _operatorApprovals;
    }

    struct StateNew {
        mapping (uint256 => address) _tokenOwner;
        mapping (uint256 => address) _tokenApprovals;
        mapping (address => uint256) _ownedTokensCount;
        mapping (address => mapping (address => bool)) _operatorApprovals;
    }

    StateOld abs;
    StateOld abs_old;
    StateNew con;
    StateNew con_old;

    /// @notice precondition true
    /// @notice postcondition true
    function inv() public {}

    /// @notice precondition true
    /// @notice postcondition true
    function cons_pre() public {}

    /// @notice precondition true
    /// @notice postcondition true
    function cons_post() public {}

    /// @notice precondition true
    /// @notice postcondition true
    function balanceOf_pre(address _owner, uint256 balance) public view returns (uint256) {}

    /// @notice precondition forall (address _owner) abs._ownedTokensCount[_owner] == con._ownedTokensCount[_owner] // Abstraction function
    $balanceOf
    /// @notice postcondition abs._ownedTokensCount[_owner] == balance
    function balanceOf_post(address _owner, uint256 balance) public view returns (uint256) {}

    /// @notice precondition true
    /// @notice postcondition true
    function ownerOf_pre(uint256 _tokenId, address _owner) public view returns (address) {}

    /// @notice precondition forall (uint256 _tokenId) abs._tokenOwner[_tokenId] == con._tokenOwner[_tokenId] // Abstraction function
    $ownerOf
    /// @notice postcondition abs._tokenOwner[_tokenId] == _owner
    /// @notice postcondition  _owner !=  address(0)
    function ownerOf_post(uint256 _tokenId, address _owner) public view returns (address) {}

    /// @notice precondition true
    /// @notice postcondition true
    function approve_pre(address _approved, uint256 _tokenId) public {}

    /// @notice precondition forall (uint256 _tokenId) abs._tokenApprovals[_tokenId] == con._tokenApprovals[_tokenId] // Abstraction function
    $approve
    /// @notice postcondition abs._tokenApprovals[_tokenId] == _approved 
    function approve_post(address _approved, uint256 _tokenId) public;

    /// @notice precondition true
    /// @notice postcondition true
    function getApproved_pre(uint256 _tokenId, address approved) public view returns (address) {}

    /// @notice precondition forall (uint256 _tokenId) abs._tokenOwner[_tokenId] == con._tokenOwner[_tokenId] // Abstraction function
    /// @notice precondition forall (uint256 _tokenId) abs._tokenApprovals[_tokenId] == con._tokenApprovals[_tokenId] // Abstraction function
    $getApproved
    /// @notice postcondition abs._tokenOwner[_tokenId] != address(0)
    /// @notice postcondition abs._tokenApprovals[_tokenId] == approved
    function getApproved_post(uint256 _tokenId, address approved) public view returns (address) {}

    /// @notice precondition true
    /// @notice postcondition true
    function setApprovalForAll_pre(address _operator, bool _approved) public {}

    /// @notice precondition forall (address owner, address operator) abs._operatorApprovals[owner][operator] == con._operatorApprovals[owner][operator] // Abstraction function
    /// @notice precondition forall (address owner, address operator) abs_old._operatorApprovals[owner][operator] == con_old._operatorApprovals[owner][operator] // Abstraction function
    $setApprovalForAll
    /// @notice postcondition abs._operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll_post(address _operator, bool _approved) public {}

    /// @notice precondition true
    /// @notice postcondition true
    function isApprovedForAll_pre(address _owner, address _operator, bool approved) public view returns (bool) {}

    /// @notice precondition forall (address _owner, address _operator) abs._operatorApprovals[_owner][_operator] == con._operatorApprovals[_owner][_operator] // Abstraction function
    $isApprovedForAll
    /// @notice postcondition abs._operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll_post(address _owner, address _operator, bool approved) public view returns (bool) {}
    
    /// @notice precondition true
    /// @notice postcondition true
    function transferFrom_pre(address _from, address _to, uint256 _tokenId) public {}

    /// @notice precondition forall (address _from) abs._ownedTokensCount[_from] == con._ownedTokensCount[_from] // Abstraction function
    /// @notice precondition forall (address _from) abs_old._ownedTokensCount[_from] == con_old._ownedTokensCount[_from] // Abstraction function
    /// @notice precondition forall (address _to) abs._ownedTokensCount[_to] == con._ownedTokensCount[_to] // Abstraction function
    /// @notice precondition forall (address _to) abs_old._ownedTokensCount[_to] == con_old._ownedTokensCount[_to] // Abstraction function
    /// @notice precondition forall (uint256 _tokenId) abs._tokenOwner[_tokenId] == con._tokenOwner[_tokenId] // Abstraction function
    $transferFrom
    /// @notice postcondition ( ( abs._ownedTokensCount[_from] ==  abs_old._ownedTokensCount[_from] - 1  &&  _from  != _to ) || ( _from == _to )  ) 
    /// @notice postcondition ( ( abs._ownedTokensCount[_to] ==  abs_old._ownedTokensCount[_to] + 1  &&  _from  != _to ) || ( _from  == _to ) )
    /// @notice postcondition  abs._tokenOwner[_tokenId] == _to
    function transferFrom_post(address _from, address _to, uint256 _tokenId) public {}


    /// @notice precondition forall (address _from) abs._ownedTokensCount[_from] == con._ownedTokensCount[_from] // Abstraction function
    /// @notice precondition forall (address _from) abs_old._ownedTokensCount[_from] == con_old._ownedTokensCount[_from] // Abstraction function
    /// @notice precondition forall (address _to) abs._ownedTokensCount[_to] == con._ownedTokensCount[_to] // Abstraction function
    /// @notice precondition forall (address _to) abs_old._ownedTokensCount[_to] == con_old._ownedTokensCount[_to] // Abstraction function
    /// @notice precondition forall (uint256 _tokenId) abs._tokenOwner[_tokenId] == con._tokenOwner[_tokenId] // Abstraction function
    $safeTransferFrom3
    /// @notice postcondition ( ( abs._ownedTokensCount[_from] ==  abs_old._ownedTokensCount[_from] - 1  &&  _from  != _to ) || ( _from == _to )  ) 
    /// @notice postcondition ( ( abs._ownedTokensCount[_to] ==  abs_old._ownedTokensCount[_to] + 1  &&  _from  != _to ) || ( _from  == _to ) )
    /// @notice postcondition  abs._tokenOwner[_tokenId] == _to
    function safeTransferFrom_post(address _from, address _to, uint256 _tokenId) public {}

    /// @notice precondition true
    /// @notice postcondition true
    function safeTransferFrom_pre(address _from, address _to, uint256 _tokenId, bytes memory data) public {}

    /// @notice precondition forall (address _from) abs._ownedTokensCount[_from] ==  con._ownedTokensCount[_from] // Abstraction function
    /// @notice precondition forall (address _to) abs_old._ownedTokensCount[_to] ==  con_old._ownedTokensCount[_to] // Abstraction function
    /// @notice precondition forall (uint256 _tokenId) abs._tokenOwner[_tokenId] == con._tokenOwner[_tokenId] // Abstraction function
    $safeTransferFrom4
    /// @notice postcondition ( ( abs._ownedTokensCount[_from] ==  abs_old._ownedTokensCount[_from] - 1  &&  _from  != _to ) || ( _from == _to )  ) 
    /// @notice postcondition ( ( abs._ownedTokensCount[_to] ==  abs_old._ownedTokensCount[_to] + 1  &&  _from  != _to ) || ( _from  == _to ) )
    /// @notice postcondition  abs._tokenOwner[_tokenId] == _to
    function safeTransferFrom_post(address _from, address _to, uint256 _tokenId, bytes memory data) public {}
}